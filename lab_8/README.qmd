---
 title: " Анализ данных сетевого трафика с использованием аналитической in-memory СУБД DuckDB"
 author: "odintsovajulia19@yandex.ru"
 format: 
   md:
     output-file: README.md
---

Изначально работа проходила под логином user11.

## Цель работы

1.  Изучить возможности СУБД DuckDB для обработки и анализ больших данных
2.  Получить навыки применения DuckDB совместно с языком программирования R
3.  Получить навыки анализа метаинфомации о сетевом трафике
4.  Получить навыки применения облачных технологий хранения, подготовки и анализа данных: Yandex Object Storage, Rstudio Server.

## Исходные данные

1.  Программное обеспечение Windows 10
2.  Данные tm_data.pqt
3.  Rstudio Server
4.  Интерпретатор языка R 4.1
5.  DuckDB и Dplyr.

## Задание

Используя язык программирования R, OLAP СУБД DuckDB библиотеку duckdb и облачную IDE Rstudio Server, развернутую в Yandex Cloud, выполнить задания и составить отчет.

## Ход работы

### Задание 1: Надите утечку данных из Вашей сети

Важнейшие документы с результатами нашей исследовательской деятельности в области создания вакцин скачиваются в виде больших заархивированных дампов. Один из хостов в нашей сети используется для пересылки этой информации – он пересылает гораздо больше информации на внешние ресурсы в Интернете, чем остальные компьютеры нашей сети. Определите его IP-адрес.

-Подготовим рабочую среду

```{r}
options(timeout = 1000000)
download.file("https://storage.yandexcloud.net/arrow-datasets/tm_data.pqt",destfile = "tm_data.pqt")
library(duckdb)
library(dplyr)
con <- dbConnect(duckdb::duckdb(), dbdir = "my_db.duckdb", read_only = FALSE)
download.file('https://storage.yandexcloud.net/arrow-datasets/tm_data.pqt', destfile = "tm_data.pqt")
dbExecute(con,"CREATE TABLE tm_data_table as SELECT * FROM read_parquet('tm_data.pqt')")
```

2.  Решение

```{r}
query <- "SELECT src
          FROM tm_data_table
          WHERE (regexp_matches(src,'^(12|13|14)\\.'))
          AND NOT (regexp_matches(dst,'^(12|13|14)\\.'))
          GROUP BY src
          ORDER BY SUM(bytes) DESC
          LIMIT 1;"

dbGetQuery(con, query)
```

### Задание 2: Надите утечку данных 2

Другой атакующий установил автоматическую задачу в системном планировщике cron для экспорта содержимого внутренней wiki системы. Эта система генерирует большое количество трафика в нерабочие часы, больше чем остальные хосты. Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителя из предыдущей задачи.

```{r}
query <- "SELECT time, COUNT(*) FROM
        (
        SELECT timestamp, src, dst, bytes, EXTRACT(HOUR FROM epoch_ms(CAST(timestamp AS BIGINT))) AS time
        FROM tm_data_table
        WHERE (regexp_matches(src,'^(12|13|14)\\.'))
        AND NOT (regexp_matches(dst,'^(12|13|14)\\.'))
        )
        GROUP BY time"
dbGetQuery(con, query)
```

```{r}
query <- "SELECT src, SUM(bytes) AS total
    FROM  (
          SELECT src, bytes, dst, EXTRACT(HOUR FROM epoch_ms(CAST(timestamp AS BIGINT))) AS time
          FROM tm_data_table
          )
    WHERE src != '13.37.84.125' AND (regexp_matches(src,'^(12|13|14)\\.'))
        AND NOT (regexp_matches(dst,'^(12|13|14)\\.')) AND time >= 0 AND time <= 15
    GROUP BY src
    ORDER BY total DESC
    LIMIT 1;"
dbGetQuery(con, query)
```

### Задание 3: Надите утечку данных 3

Еще один нарушитель собирает содержимое электронной почты и отправляет в Интернет используя порт, который обычно используется для другого типа трафика. Атакующий пересылает большое количество информации используя этот порт, которое нехарактерно для других хостов, использующих этот номер порта. Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителей из предыдущих задач.

```{r}
query <- "SELECT port, MAX(bytes) - AVG(bytes)
        FROM tm_data_table
        WHERE src != '13.37.84.125' AND src != '12.55.77.96' 
        AND (regexp_matches(src,'^(12|13|14)\\.'))
        AND NOT (regexp_matches(dst,'^(12|13|14)\\.'))
        GROUP BY port
        ORDER BY MAX(bytes) - AVG(bytes) DESC"
dbGetQuery(con, query)
```

-   Пришли к выводу, что порт 37 наиболее вероятно используется нарушителем. Посмотрим информацию о нем

```{r}
query <- "SELECT src, AVG(bytes)
          FROM tm_data_table
          WHERE src != '13.37.84.125' AND src != '12.55.77.96' 
          AND (regexp_matches(src,'^(12|13|14)\\.'))
          AND port = 37
          GROUP BY src
          ORDER BY AVG(bytes) DESC
          LIMIT 1;"
dbGetQuery(con, query)
```

## Оценка результата

С использованием инструментов DuckDB и RStudio Server были проведены задания по исследованию сетевого трафика.

## Вывод

## Провели работу с DuckDB, ознакомились с применением облачных технологий для хранения, подготовки и анализа данных, а также проанализировали метаинформацию о сетевом трафике.

## 
